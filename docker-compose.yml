include:
  - ./supabase/docker/docker-compose.yml

volumes:
  n8n_storage:
  qdrant_storage:
  open-webui:
  flowise:
  valkey-data:
  cloudflared-data:
  # Caddy volumes (uncomment if using Caddy)
  # caddy_data:
  # caddy_config:

services:
  # =============================================================================
  # Cloudflare Tunnel - Punto único de entrada desde internet
  # =============================================================================
  cloudflared:
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    container_name: cloudflared
    command: tunnel --config /etc/cloudflared/config.yml run
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}
    volumes:
      - ./config.yml:/etc/cloudflared/config.yml:ro
      - cloudflared-data:/etc/cloudflared
    depends_on:
      n8n:
        condition: service_healthy
      open-webui:
        condition: service_started
      flowise:
        condition: service_started
      qdrant:
        condition: service_healthy
      searxng:
        condition: service_started
      supabase_auth:
        condition: service_started

  # =============================================================================
  # Servicios AI - Acceso directo via Cloudflare Tunnel
  # =============================================================================

  # n8n - Workflow automation
  n8n:
    image: n8nio/n8n:latest
    restart: unless-stopped
    container_name: n8n
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=db
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_POSTGRESDB_DATABASE=postgres
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${JWT_SECRET}
      - WEBHOOK_URL=https://${N8N_SUBDOMAIN}.${CLOUDFLARE_DOMAIN}
      - N8N_HOST=${N8N_SUBDOMAIN}.${CLOUDFLARE_DOMAIN}
      - N8N_PROTOCOL=https
      - N8N_PORT=5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - "${DOCKER_SOCKET_LOCATION:-/var/run/docker.sock}:/var/run/docker.sock:ro,z"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Open WebUI - AI chat interface
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    restart: unless-stopped
    container_name: open-webui
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data
      - "${DOCKER_SOCKET_LOCATION:-/var/run/docker.sock}:/var/run/docker.sock:ro,z"
    environment:
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - WEBUI_SECRET_KEY=${SECRET_KEY_BASE}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}

  # Flowise - AI agent builder
  flowise:
    image: flowiseai/flowise
    restart: unless-stopped
    container_name: flowise
    environment:
        - PORT=3001
        - FLOWISE_USERNAME=${FLOWISE_USERNAME}
        - FLOWISE_PASSWORD=${FLOWISE_PASSWORD}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
        - ~/.flowise:/root/.flowise
    entrypoint: /bin/sh -c "sleep 3; flowise start"

  # Qdrant - Vector database
  qdrant:
    image: qdrant/qdrant:latest
    restart: unless-stopped
    container_name: qdrant
    volumes:
      - qdrant_storage:/qdrant/storage:z
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__SERVICE__API_KEY=${QDRANT_API_KEY}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # SearXNG - Private search engine
  searxng:
    container_name: searxng
    image: searxng/searxng:latest
    restart: unless-stopped
    volumes:
      - ./searxng:/etc/searxng:rw
    environment:
      - SEARXNG_BASE_URL=https://${SEARXNG_SUBDOMAIN}.${CLOUDFLARE_DOMAIN}/
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  # Valkey - Redis-compatible cache
  valkey:
    container_name: valkey
    image: valkey/valkey:7-alpine
    restart: unless-stopped
    command: valkey-server --save 30 1 --loglevel warning
    volumes:
      - valkey-data:/data

  # =============================================================================
  # CADDY (OPCIONAL) - Proxy reverso con SSL automático
  # Descomenta para usar Caddy en lugar de/junto con Cloudflare Tunnel
  # Ideal para dominios compartidos entre múltiples servidores
  # =============================================================================

  # caddy:
  #   image: caddy:2-alpine
  #   restart: unless-stopped
  #   container_name: caddy
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./Caddyfile:/etc/caddy/Caddyfile:ro
  #     - caddy_data:/data
  #     - caddy_config:/config
  #   environment:
  #     - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
  #     - N8N_HOSTNAME=${N8N_SUBDOMAIN}.${CLOUDFLARE_DOMAIN}
  #     - WEBUI_HOSTNAME=${OPENWEBUI_SUBDOMAIN}.${CLOUDFLARE_DOMAIN}
  #     - FLOWISE_HOSTNAME=${FLOWISE_SUBDOMAIN}.${CLOUDFLARE_DOMAIN}
  #     - QDRANT_HOSTNAME=${QDRANT_SUBDOMAIN}.${CLOUDFLARE_DOMAIN}
  #     - SUPABASE_HOSTNAME=${SUPABASE_SUBDOMAIN}.${CLOUDFLARE_DOMAIN}
  #     - SEARXNG_HOSTNAME=${SEARXNG_SUBDOMAIN}.${CLOUDFLARE_DOMAIN}
  #   depends_on:
  #     n8n:
  #       condition: service_healthy
  #     open-webui:
  #       condition: service_started
  #     flowise:
  #       condition: service_started
  #     qdrant:
  #       condition: service_healthy
  #     searxng:
  #       condition: service_started